# -*- encoding: utf-8 -*-
'''
@time: 2018  下午5:54

@author: wowjoy
'''

import os
import numpy as np
from multiprocessing.dummy import Pool as ThreadPool
import matplotlib.pyplot as plt
import pdb
main_ip = os.path.join(os.getcwd(), '../data/origin')
image_ip = os.path.join(main_ip, 'image')
label_ip = os.path.join(main_ip, 'label')

main_op = os.path.join(os.getcwd(), '../data/segment')
image_op = os.path.join(main_op, 'image')
label_op = os.path.join(main_op, 'label')
if not os.path.exists(image_op):
    os.makedirs(image_op)
if not os.path.exists(label_op):
    os.makedirs(label_op)



def soft_l1(img, a, b, w):
    img_o = img.copy()
    img_o = np.float32(img_o)
    if np.sum(img_o > b):
        x = img_o[img_o > b]
        img_o[img_o > b] = b + w / (1 + np.exp((b - x) / w)) - w / 2
    if np.sum(img_o < a):
        x = img_o[img_o < a]
        img_o[img_o < a] = a + w / (1 + np.exp((a - x) / w)) - w / 2
    img_o = img_o - (a - w / 2)
    img_o = img_o / (b - a + w) * 255
    return img_o.astype(np.uint8)

def resize(data,size):
    image = np.zeros(shape=[size,size,size])
    height,width,depth = data.shape
    image[:height,:width,:depth]=data
    return image

def crop_data(image,label, size):
    '''
    :param img:　原始x,y方向层厚为原值,z方向层厚为thresh=1.0的图像数据
    :param size: 裁剪的大小，即模型输入大小
    :return:
    '''

    image_list=[]
    label_list=[]
    height,width,depth = image.shape
    for z in range(0, depth, size):
        for y in range(0,height,size):
            for x in range(0,width,size):
                image_list.append(soft_l1(image[y:y+size,x:x+size,z:z+size],-1350, 150, 150.0))
                label_list.append(label[y:y + size, x:x + size, z:z + size])

    if depth - z < size:
        # pdb.set_trace()
        image_list.append(soft_l1(resize(image[y:y + size, x:x + size, z:z + size], size), -1350, 150, 150.0))
        label_list.append(resize(label[y:y + size, x:x + size, z:z + size], size))

    return image_list, label_list

def preprocess(job):
    i,old_name= job
    image = np.load(os.path.join(image_ip, old_name))
    label = np.load(os.path.join(label_ip, old_name))
    image_list, label_list = crop_data(image, label, size=64)
    for j in range(len(image_list)):
        new_name = 'seg_'+'%s_%d.npy'%(old_name[:-4],j+1)
        print('to save seg sets,loop:', old_name[:-4], new_name)
        image = image_list[j]
        np.save(os.path.join(image_op, new_name), image)
        label = label_list[j]
        np.save(os.path.join(label_op, new_name), label)


def get_deeplab_all_sets():
    pool = ThreadPool(8)
    names = os.listdir(image_ip)
    jobs = []
    for i, old_name in enumerate(names):
        jobs += [(i,old_name)]
    pool.map(preprocess,jobs)
    pool.close() 
    pool.join() 
 
get_deeplab_all_sets()








