#-*- coding:utf-8 -*-
import os
import sys
import cv2
import time
import numpy as np
import torch
import torch.utils.data
from torch import nn
from utils import *
from opts import parse_opts
from multiprocessing import pool
import model
import segment
import classify
import pdb

def predict_demo():

    load_data_beg_time = time.time()
    opt = parse_opts()
    opt.reload_path = os.path.join(opt.root_path, opt.reload_path)
    #opt.image_path = os.path.join(opt.root_path,opt.image_path)
    #opt.mask_path = os.path.join(opt.root_path,opt.mask_path)
    opt.image_path = os.path.join(opt.root_path,'../../origin_datas/'+opt.image_path)
    opt.mask_path = os.path.join(opt.root_path,'../../origin_datas/'+opt.mask_path)
    '''#########################################################################'''
    # reload trained deeplab model
    '''#########################################################################'''
    reload_model_time = time.time()
    seg_reload_file = os.path.join(opt.reload_path, opt.seg_reload_model)
    seg_model, _ = model.generate_model(opt, phase='segment')
    checkpoint = torch.load(seg_reload_file)
    state_dict = checkpoint['state_dict']
    if not opt.no_cuda:  # 使用GPU
        seg_model.load_state_dict(state_dict)
    else:  # 使用CPU:
        new_state_dict = OrderedDict()
        for k, v in state_dict.items():
            name = k[7:]  # remove `module.`
            new_state_dict[name] = v
        seg_model.load_state_dict(new_state_dict)

    cla_reload_file = os.path.join(opt.reload_path, opt.cla_reload_model)
    cla_model, _ = model.generate_model(opt, phase='classify')
    checkpoint = torch.load(cla_reload_file)
    state_dict = checkpoint['state_dict']
    if not opt.no_cuda:  # 使用GPU
        cla_model.load_state_dict(state_dict)
    else:  # 使用CPU:
        new_state_dict = OrderedDict()
        for k, v in state_dict.items():
            name = k[7:]  # remove `module.`
            new_state_dict[name] = v
        cla_model.load_state_dict(new_state_dict)
    print('reload classify model cost time:', time.time() - reload_model_time)

    names=os.listdir(opt.image_path)
    results=pd.DataFrame()
    for name in names:
        image_path = os.path.join(opt.image_path, name)
        mask_path = os.path.join(opt.mask_path, name)
        image,mask = get_patient_image_mask(image_path, mask_path,opt.seg_sample_size)
        
        seg_time = time.time()
        seg_loader = get_seg_inputs(image, opt)
        seg_pred = segment.predict(seg_loader, seg_model, opt)
        seg_result = get_seg_outputs(seg_pred, mask, opt.seg_pred_thresh)
        print('segment cost time:',time.time()-seg_time)
        
        cla_time = time.time()
        cla_loader = get_cla_inputs(image, seg_result, opt)
        cla_prob, cla_pred = classify.predict(cla_loader, cla_model, opt)
        cla_result = get_cla_outpus(cla_prob,cla_pred,seg_result,name.split('.')[0])
        print('predict cost all time:',time.time()-cla_time)
        results.concat(cla_result,axis=0)
        pdb.set_trace()
        show_predict_results(image, cla_result,opt.save_path)


if __name__ == '__main__':
    predict_demo()
    







